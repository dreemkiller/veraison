syntax = "proto3";
package endorsement;

option go_package = "github.com/veraison/endorsement";

import "google/protobuf/struct.proto";
import "result.proto";

enum AttestationFormat {
	// UnknownFormat is used to indicate that the format of the attestation could
	// not be established.
	UNKNOWN_FORMAT = 0;

	// PSA-IOT is the PSA attestation format (based on:
	// https://developer.arm.com/architectures/architecture-security-features/platform-security)
	PSA_IOT = 1;

	// DICE is the attestation format based on the TCG DICE specification
	// https://trustedcomputinggroup.org/wp-content/uploads/TCG_DICE_Attestation_Architecture_r22_02dec2020.pdf
	DICE = 2;
}

enum TaType {
    UNSPECIFIED = 0;
    RAWPUBLICKEY = 1;
    // Refer https://github.com/veraison/veraison/issues/76, to introduce certs here!
    INVALID = 255;
}

message EndorsementID {
    AttestationFormat type = 1;
    google.protobuf.Struct parts = 2;
}

message Evidence {
    google.protobuf.Struct value = 1;
}

message GetEndorsementsArgs{
    EndorsementID id = 1;
    Evidence evidence = 2;
}

message ResponseHeader {
    bool result = 1;
    string error_detail = 2;
}

message GetEndorsementsResponse {
    ResponseHeader status = 1;
    string details = 2;
    common.TrustVector trust_vector = 3;
    google.protobuf.Struct endorsements = 4;
}

message OpenArgs {
}

message CloseArgs {
}

message SwComponentID {
    AttestationFormat type = 1;
    google.protobuf.Struct parts = 2;
}

message SwComponent {
    SwComponentID id = 1;
    google.protobuf.Struct attributes = 2; 
}

message AddSwComponentArgs {
    repeated SwComponent info = 1;
}

message GetSwComponentArgs {
    SwComponentID id = 1;
}

message GetSwComponentResponse {
    ResponseHeader status = 1;
    google.protobuf.Struct attributes = 2;
}

message TrustAnchorID {
    AttestationFormat type = 1;
    google.protobuf.Struct parts = 2;
}

message TrustAnchorValue {
    TaType type = 1;
    google.protobuf.Struct value = 2;
}

message TrustAnchor {
    TrustAnchorID id = 1;
    TrustAnchorValue value = 2;
}

message AddTrustAnchorArgs {
    TrustAnchor trust_anchor = 1;
}

message GetTrustAnchorArgs {
    TrustAnchorID ta_id = 1;
}

message GetTrustAnchorResponse {
    ResponseHeader status = 1;
    TrustAnchorValue value = 2;
}

service Store {
    rpc Open(OpenArgs) returns (ResponseHeader);
    rpc Close(CloseArgs) returns (ResponseHeader);
}

service Fetcher {
    rpc GetEndorsements(GetEndorsementsArgs) returns (GetEndorsementsResponse);
}

// Provisioner is the Service end point that is used to store
// and retrieve Software Components and Trust Anchors to and from
// the Endorsement Store
service Provisioner {
    rpc AddSwComponents(AddSwComponentArgs) returns (ResponseHeader);
    rpc GetSwComponent(GetSwComponentArgs)  returns (GetSwComponentResponse);
    rpc AddTrustAnchor(AddTrustAnchorArgs) returns (ResponseHeader);
    rpc GetTrustAnchor(GetTrustAnchorArgs) returns (GetTrustAnchorResponse);
}
// vim: set et sts=4 sw=4 si :
